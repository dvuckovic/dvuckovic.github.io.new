(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{1204:function(e,t,a){"use strict";a.r(t);var s=a(9),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("Recently I ventured to build and install a copy of Metview on a local computer, in order to provide my wife a testing platform when she is working from home. Metview is a meteorological workstation application and its capabilities include powerful data access, processing and visualization. It is maintained and developed in part by "),a("a",{attrs:{href:"https://software.ecmwf.int/wiki/display/METV/Metview",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECMWF"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("ECMWF site does provide relatively precise instructions how to build software from sources, but I hit a wall at first try, mainly because instructions are a little vague at some points, and take many things for granted and obvious. This post should serve as a kind of mental note for future reference, but if somebody finds it useful, itâ€™s fine by me ðŸ˜ƒ")]),e._v(" "),a("h2",{attrs:{id:"distribution"}},[a("a",{staticClass:"Permalink",attrs:{href:"#distribution"}},[e._v("#")]),e._v(" Distribution")]),e._v(" "),a("p",[a("em",[e._v("UPDATE: Originally, this guide was written for openSUSE 11.3, but in the meantime I wondered if it would work on newer version (12.3). Short answer: it did, but with some modifications. I linked newer set of scripts "),a("a",{attrs:{href:"#12_3"}},[e._v("below")]),e._v(" for openSUSE 12.3, there are some additional packages needed, and I used this opportunity to install newer version of MetView too (4.3.7)")]),e._v(" ðŸ˜ƒ")]),e._v(" "),a("p",[e._v("Installation guide lists openSUSE 11.3 and SLES 11 64bit as tested platform, so I didnâ€™t want to experiment and went with "),a("a",{attrs:{href:"http://ftp5.gwdg.de/pub/opensuse/discontinued/distribution/11.3/iso/",target:"_blank",rel:"noopener noreferrer"}},[e._v("openSUSE 11.3 x86_64"),a("OutboundLink")],1),e._v(". There is some benefit in testing older Linux distributions, since there has been some time people were using it. Online instructions are a plenty for openSUSE, and coming from Ubuntu/Debian background was rather easy. There are similar commands for almost all operations which differ between them, and once you learn proper paths for configuration files, you feel right at home.")]),e._v(" "),a("p",[e._v("I even managed to find an AutoYAST script online, which helped me to speed up installation by making it automatic. You just place the "),a("a",{attrs:{href:"https://cdn.dvuckovic.com/downloads/autoyast.tar.gz",target:"_blank",rel:"noopener noreferrer"}},[e._v("configuration files"),a("OutboundLink")],1),e._v(" on a USB flash, and when you boot from installation DVD you just supply following Boot Options:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("autoyast=device:///autoinst.xml\n")])])]),a("p",[e._v("Setup will then search all devices for this configuration file, and luckily it will find one on your USB flash and proceed with automatic installation. Easy!")]),e._v(" "),a("p",[e._v("This script will create one user "),a("code",[e._v("metview")]),e._v(" with password "),a("code",[e._v("metview")]),e._v(" (which is also root password).")]),e._v(" "),a("h2",{attrs:{id:"building-libraries"}},[a("a",{staticClass:"Permalink",attrs:{href:"#building-libraries"}},[e._v("#")]),e._v(" Building libraries")]),e._v(" "),a("p",[e._v("Metview is dependent on some custom libraries, so you are advised to build these first. This are listed in preferred order of installation:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://software.ecmwf.int/wiki/display/GRIB/What+is+GRIB-API",target:"_blank",rel:"noopener noreferrer"}},[e._v("GRIB API"),a("OutboundLink")],1),e._v(" (I used v1.9.16)")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://software.ecmwf.int/wiki/display/EMOS/What+is+EMOSLIB",target:"_blank",rel:"noopener noreferrer"}},[e._v("EMOSLIB"),a("OutboundLink")],1),e._v(" (I used v000382)")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://software.ecmwf.int/wiki/pages/viewpage.action?pageId=14975084",target:"_blank",rel:"noopener noreferrer"}},[e._v("Magics++"),a("OutboundLink")],1),e._v(" (I used v2.18.12)")])]),e._v(" "),a("p",[e._v("Before you can start compiling and installing everything, you first need some additional packages atop basic openSUSE installation. Please bear in mind that most commands need root privileges, so you might first want to go in superuser shell with "),a("code",[e._v("su")]),e._v(" command.")]),e._v(" "),a("p",[e._v("For some reason, my basic installation didnâ€™t include online software repositories, so I had to add it first:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("zypper")]),e._v(" -n ar http://ftp5.gwdg.de/pub/opensuse/discontinued/distribution/11.3/repo/oss/ OSS\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("zypper")]),e._v(" -n --no-gpg-checks --gpg-auto-import-keys ar http://download.opensuse.org/repositories/Application:/Geo/openSUSE_11.3/ Geo\n")])])]),a("p",[e._v("First one is official OSS repository, used for most of the packages. Second one is used for some additional binary packages needed for successful build process. They lack appropriate security key, thatâ€™s why there are some additional switches to override checks. There is also non interactive switch ("),a("code",[e._v("-n")]),e._v(") because my main goal is to make everything scriptable for automatic installation in the end ðŸ˜ƒ")]),e._v(" "),a("p",[e._v("After you add repositories, you must refresh them and then install needed packages:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("zypper")]),e._v(" -n --no-gpg-checks ref\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("zypper")]),e._v(" -n --no-gpg-checks "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" libnetcdf4 libnetcdf-devel libexpat-devel expat ghostscript-devel perl-Geo-Proj4 libproj-devel cairomm-devel cairomm-32bit perl-Cairo gd-devel jasper libjasper-devel gcc-fortran libqt4-devel openmotif openmotif-devel ImageMagick-devel ksh-devel libQtWebKit-devel "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("nano")]),e._v("\n")])])]),a("p",[e._v("Next, we proceed with building GRIB API. First untar the archive and go to itâ€™s directory:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("tar")]),e._v(" zxvf grib_api-1.9.16.tar.gz\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" grib_api-1.9.16/\n")])])]),a("p",[e._v("Instructions advise to use specific compiler flags on 64-bit systems ("),a("code",[e._v("-fPIC -O2")]),e._v("), so we will then call configuration script with them and default installation directory:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./configure "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CFLAGS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-fPIC -O2"')]),e._v(" --prefix"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/usr/local\n")])])]),a("p",[e._v("Finally, we build, check and install library:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" check\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n")])])]),a("p",[e._v("If everything goes fine, there should not be any errors reported. Next on the list is EMOSLIB.")]),e._v(" "),a("p",[e._v("First, untar the archive:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("tar")]),e._v(" zxvf emos_000382.tar.gz\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" emos_000382/\n")])])]),a("p",[e._v("In order to build this properly, you first need to change aforementioned flags in configuration file. This wasnâ€™t adequately explained in original instructions, so after little trial and error I finally made it. Easiest way to do this is to change configuration file from the command line, like this:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" config/config.linuxR64 config/config.linuxR64.old\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sed")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"s/CFLAGS  = -g/CFLAGS  = -fPIC -O2 -g/g"')]),e._v(" config/config.linuxR64 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" config/config.linuxR64.new\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mv")]),e._v(" config/config.linuxR64.new config/config.linuxR64\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("744")]),e._v(" config/config.linuxR64\n")])])]),a("p",[e._v("Next, I needed to change build script because I had to make sure the procedure is non-interactive. I just deleted all user interaction logic, and set variables to their default values. Script is included in the install script archive below, just copy it to "),a("code",[e._v("emos_000382/")]),e._v(" folder and make sure it has executable permission.")]),e._v(" "),a("p",[e._v("Now, to the build and install process:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./build_library_R64\n./install\n")])])]),a("p",[e._v("Only one library remains and itâ€™s the most complex one (Magics++). Proceed with following commands:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("tar")]),e._v(" zxvf Magics-2.18.12.tar.gz\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" Magics-2.18.12/\n./configure "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CFLAGS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-fPIC -O2"')]),e._v(" --prefix"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/usr/local --enable-metview --enable-bufr\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" check\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n")])])]),a("p",[e._v("This will take most of the time needed for entire operation, some 30 minutes on a quad-core machine. In the end, you must set the environment variable for this library, and make sure it is included in all users bash environment:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" -e "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"MAGPLUS_HOME=/usr/local'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[e._v("\\n")]),e._v('export MAGPLUS_HOME"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /etc/bash.bashrc.local\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("MAGPLUS_HOME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/usr/local\n")])])]),a("h2",{attrs:{id:"building-software"}},[a("a",{staticClass:"Permalink",attrs:{href:"#building-software"}},[e._v("#")]),e._v(" Building software")]),e._v(" "),a("p",[e._v("Finally, we can now build Metview software. I used v4.3.4 release which can be found on the "),a("a",{attrs:{href:"https://software.ecmwf.int/wiki/display/METV/Releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("ECMWF software site"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("tar")]),e._v(" zxvf Metview-4.3.4.tar.gz\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" Metview-4.3.4/\n./configure "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("CFLAGS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-fPIC -O2"')]),e._v(" --prefix"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/usr/local\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" check\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n")])])]),a("p",[e._v("If everything goes to plan, installation is complete. I made a shortcut link and it can be placed to desktop with following command:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" MetView.desktop ~/Desktop/\n")])])]),a("h2",{attrs:{id:"automating-installation"}},[a("a",{staticClass:"Permalink",attrs:{href:"#automating-installation"}},[e._v("#")]),e._v(" Automating installation")]),e._v(" "),a("p",[e._v("When I was content with installation procedure, I set to write a bash script for automatic installation which contains all the commands above. Installation script can be downloaded from "),a("a",{attrs:{href:"https://cdn.dvuckovic.com/downloads/install-metview-11.3.zip",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(", the archive includes modified build script for EMOSLIB and desktop shortcut. To run it use following commands:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("su")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" ./install-metview.sh\n")])])]),a("p",[e._v("Additional version of script suitable for openSUSE 12.3 and MetView 4.3.7 can be downloaded "),a("a",{attrs:{name:"12_3",href:"https://cdn.dvuckovic.com/downloads/install-metview-12.3.zip"}},[e._v("here")]),e._v(".")])])}),[],!1,null,null,null);t.default=n.exports}}]);